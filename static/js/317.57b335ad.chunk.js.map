{"version":3,"file":"static/js/317.57b335ad.chunk.js","mappings":"oLACA,EAAuB,gCAAvB,EAAwE,0C,SC+CxE,EA7Cc,WACV,IAAMA,GAAWC,EAAAA,EAAAA,aAiCjB,OACI,iBAAKC,UAAWC,EAAhB,WACI,iDACA,iBAAKD,UAAWC,EAAhB,WACI,kBAAOC,KAAK,QAAQC,GAAG,QAAQC,IAAI,IAAIC,IAAI,MAAMC,SAAU,SAAAC,GAAC,OA/BpD,SAACA,GACjB,GAAyB,OAArBT,EAASU,QAAkB,CAC3B,IAAMC,EAAaC,SAASH,EAAEI,OAAOC,OAC/BC,EAAcC,iBAAiBP,EAAEI,QAAQI,iBAAiB,SAI1DC,EAAcF,iBAAiBhB,EAASU,SAASO,iBAAiB,SAElEE,GAAaJ,EAAYK,UAAU,EAAGL,EAAYM,OAAS,GAC3DC,GAAmBJ,EAAYE,UAAU,EAAGF,EAAYG,OAAS,GAIjEd,GAAOE,EAAEI,OAAON,IAGhBgB,EAAOZ,GAAcQ,EAAYZ,GAAOe,EAAkB,IAAUX,GArBtDa,GAmBPf,EAAEI,OAAOP,QAE+E,IArBjDmB,EAqB4C,MAALlB,EApBvCiB,GAAUC,GAsB9DzB,EAASU,QAAQgB,MAAMH,KAAvB,UAAiCA,EAAjC,MACAvB,EAASU,QAAQiB,UAAYhB,EAAWiB,UAC3C,CAzBS,IAAcJ,EAAgCC,CA6B3D,CAM2EI,CAAYpB,EAAhB,KAC5D,kBAAOqB,QAAQ,QAAQC,IAAK/B,EAA5B,qBAIf,C","sources":["webpack://frontendpractice/./src/pages/CustomRangeSlider/index.module.scss?0f37","pages/CustomRangeSlider/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"body\":\"CustomRangeSlider_body__5XcRD\",\"rangeContainer\":\"CustomRangeSlider_rangeContainer__I7kBi\"};","import React, { createRef } from 'react';\r\nimport styles from './index.module.scss';\r\n\r\nconst index = () => {\r\n    const lableRef = createRef<HTMLLabelElement>();\r\n\r\n    const scale = (num: number, in_min: number, in_max: number, out_min: number, out_max: number) => {\r\n        return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n    }\r\n\r\n    const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (lableRef.current !== null) {\r\n            const inputvalue = parseInt(e.target.value);\r\n            const range_width = getComputedStyle(e.target).getPropertyValue('width');\r\n            // console.log(inputvalue, 'inputvalueinputvalue');\r\n            // console.log(range_width, 'range_widthrange_width');\r\n\r\n            const lable_width = getComputedStyle(lableRef.current).getPropertyValue('width');\r\n\r\n            const num_width = +range_width.substring(0, range_width.length - 2);\r\n            const num_label_width = +lable_width.substring(0, lable_width.length - 2);\r\n            // console.log(num_width, 'num_widthnum_width');\r\n            // console.log(num_label_width, 'num_label_widthnum_label_width');\r\n\r\n            const max = +e.target.max;\r\n            const min = +e.target.min;\r\n\r\n            const left = inputvalue * (num_width / max) - num_label_width / 2 + scale(inputvalue, min, max, 10, -10);\r\n            //使用类型守卫，确保其值不是null;\r\n            lableRef.current.style.left = `${left}px`;\r\n            lableRef.current.innerHTML = inputvalue.toString();\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={styles.body}>\r\n            <h2>Custom Range Slider</h2>\r\n            <div className={styles.rangeContainer}>\r\n                <input type=\"range\" id=\"range\" min=\"0\" max=\"100\" onChange={e => inputChange(e)} />\r\n                <label htmlFor='range' ref={lableRef}>50</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default index"],"names":["lableRef","createRef","className","styles","type","id","min","max","onChange","e","current","inputvalue","parseInt","target","value","range_width","getComputedStyle","getPropertyValue","lable_width","num_width","substring","length","num_label_width","left","in_min","out_min","style","innerHTML","toString","inputChange","htmlFor","ref"],"sourceRoot":""}